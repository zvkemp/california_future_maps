// Generated by CoffeeScript 1.6.3
(function() {
  var CountyMap, CountyMapControls, id, text, value,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  id = function(d) {
    return d;
  };

  value = function(d) {
    return d.value;
  };

  text = function(d) {
    return d.text;
  };

  CountyMapControls = (function() {
    function CountyMapControls(map, meta) {
      var age_data, ages, changeEvent, controls, g, races, selectedAge, selectedRace, selectedYear, selector, years, zoom, _i, _len, _ref;
      controls = d3.select('body').append('div');
      years = controls.append('select');
      years.selectAll('option').data(meta.year).enter().append('option').attr('value', id).text(id);
      ages = controls.append('select');
      age_data = [
        {
          value: "all",
          text: "all Age groups"
        }
      ].concat((function() {
        var _i, _len, _ref, _results;
        _ref = meta.age_group;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          g = _ref[_i];
          _results.push({
            value: g,
            text: "" + (g.replace("..", " to ")) + " year olds"
          });
        }
        return _results;
      })());
      ages.selectAll('option').data(age_data).enter().append('option').attr('value', value).text(text);
      races = controls.append('select');
      races.selectAll('option').data(["all"].concat(meta.race)).enter().append('option').attr('value', id).text(id);
      zoom = controls.append('select');
      zoom.selectAll('option').data([
        {
          text: "Bay Area",
          value: 14000
        }, {
          text: "California",
          value: 4500
        }
      ]).enter().append('option').attr('value', value).text(text);
      zoom.on('change', function() {
        return map.zoom(zoom.node().value);
      });
      selectedYear = function() {
        return years.node().value;
      };
      selectedRace = function() {
        return races.node().value;
      };
      selectedAge = function() {
        return ages.node().value;
      };
      changeEvent = function() {
        return map.loadPopulationData(selectedYear(), selectedRace(), selectedAge());
      };
      _ref = [years, races, ages];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        selector = _ref[_i];
        selector.on('change', changeEvent);
      }
      map.onLoad = changeEvent;
    }

    return CountyMapControls;

  })();

  CountyMap = (function() {
    CountyMap.prototype.height = 800;

    CountyMap.prototype.width = 1100;

    CountyMap.prototype.onLoad = function() {};

    function CountyMap(meta) {
      this.appendHoverLayer = __bind(this.appendHoverLayer, this);
      this.appendCounties = __bind(this.appendCounties, this);
      this.zoom = __bind(this.zoom, this);
      var _this = this;
      this.svg = d3.select('body').append('svg').attr('width', this.width).attr('height', this.height);
      this.svg.append('rect').attr('width', this.width).attr('height', this.height).style('fill', '#f9f9f9').style('stroke', 'gray');
      this.projection = d3.geo.albers().scale(14000).rotate([122.8600, 0, 0]).center([0, 37.3500]).parallels([36, 35]).translate([this.width / 4, this.height / 2]);
      this.path = d3.geo.path().projection(this.projection);
      this.colors = d3.scale.linear().domain([0, 0.25, 1]).range(['#fff', '#3498DB', '#E74C3C']);
      this._meta = meta;
      d3.json('data/cali.json', function(error, counties) {
        _this.appendCounties(counties);
        _this.appendOutline(counties);
        _this.appendHoverLayer(counties);
        _this.appendLegend();
        _this.appendLiveLegend();
        _this.appendZoomControls();
        return _this.onLoad();
      });
    }

    CountyMap.prototype.appendLiveLegend = function() {
      var age_data, ages, changeEvent, g, large_text, race_data, races, selectedAge, selectedRace, selectedYear, selector, small_text, years, _i, _len, _ref;
      this._legendWrapper = this.svg.append('foreignObject').attr('x', 40).attr('y', this.height - 150).attr('width', 360).attr('height', 200);
      this.liveLegend = this._legendWrapper.append('xhtml:div');
      large_text = this.liveLegend.append('p').attr('class', 'large');
      small_text = this.liveLegend.append('p').attr('class', 'small');
      small_text.append('span').text('AS A PERCENTAGE OF THE TOTAL,');
      years = small_text.append('select').attr('class', 'small');
      years.selectAll('option').data(this._meta.year).enter().append('option').attr('value', id).text(id);
      small_text.append('span').text('ESTIMATE');
      races = large_text.append('select').attr('class', 'large');
      race_data = [
        {
          value: "all",
          text: "All Ethnicities"
        }
      ].concat((function() {
        var _i, _len, _ref, _results;
        _ref = this._meta.race;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          g = _ref[_i];
          _results.push({
            value: g,
            text: g
          });
        }
        return _results;
      }).call(this));
      races.selectAll('option').data(race_data).enter().append('option').attr('value', value).text(text);
      large_text.append('span').text(",");
      ages = large_text.append('select').attr('class', 'large');
      age_data = [
        {
          value: "all",
          text: "All Age Groups"
        }
      ].concat((function() {
        var _i, _len, _ref, _results;
        _ref = this._meta.age_group;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          g = _ref[_i];
          _results.push({
            value: g,
            text: "" + (g.replace("..", " to ")) + " year olds"
          });
        }
        return _results;
      }).call(this));
      ages.selectAll('option').data(age_data).enter().append('option').attr('value', value).text(text);
      selectedYear = function() {
        return years.node().value;
      };
      selectedRace = function() {
        return races.node().value;
      };
      selectedAge = function() {
        return ages.node().value;
      };
      changeEvent = function() {
        return map.loadPopulationData(selectedYear(), selectedRace(), selectedAge());
      };
      _ref = [years, races, ages];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        selector = _ref[_i];
        selector.on('change', changeEvent);
      }
      ages.select('option[value="18..44"]').attr('selected', 'selected');
      return map.onLoad = changeEvent;
    };

    CountyMap.prototype.appendZoomControls = function() {
      var zoom, zoomControl;
      this._zoomControlWrapper = this.svg.append('foreignObject').attr('x', 40).attr('y', this.height - 40).attr('width', 330).attr('height', 200);
      zoomControl = this._zoomControlWrapper.append('xhtml:div').style('font-size', '10pt');
      zoomControl.append('span').text('ZOOM TO:');
      zoom = zoomControl.append('select').attr('class', 'small');
      zoom.selectAll('option').data([
        {
          text: "Bay Area",
          value: 14000
        }, {
          text: "California",
          value: 4500
        }
      ]).enter().append('option').attr('value', value).text(text);
      return zoom.on('change', function() {
        return map.zoom(zoom.node().value);
      });
    };

    CountyMap.prototype.appendLegend = function() {
      var legendData, legendX, n, percent;
      this.legend = this.svg.append('g').attr('id', 'legend').attr('transform', "translate(30, " + (this.height - 100) + ")");
      legendX = function(d) {
        return 300 * d + 10;
      };
      legendData = (function() {
        var _i, _results;
        _results = [];
        for (n = _i = 0; _i <= 1; n = _i += 0.1) {
          _results.push(n);
        }
        return _results;
      })();
      this.legend.selectAll('rect').data(legendData).enter().append('rect').attr('x', legendX).attr('y', 10).attr('width', 30).attr('height', 30).style('stroke', 'white').style('fill', this.colors);
      percent = d3.format("%");
      return this.legend.selectAll('text.percentage').data(legendData).enter().append('text').attr('transform', function(d) {
        return "translate(" + (legendX(d) + 15) + ", 50)";
      }).text(percent).style('text-anchor', 'middle').style('font-size', 10).style('font-weight', 'bold');
    };

    CountyMap.prototype.appendControls = function(meta) {
      return new CountyMapControls(this, meta);
    };

    CountyMap.prototype.appendOutline = function(counties) {
      this.outline = this.svg.append('path').datum(topojson.mesh(counties, counties.objects.california_counties, function(a, b) {
        return a === b && a.id === b.id;
      })).attr('class', 'outline').attr('d', this.path).style('stroke', 'gray').style('stroke-width', '1pt').style('fill', 'none');
      return this.bay_area = this.svg.append('path').datum(topojson.merge(counties, counties.objects.california_counties.geometries.filter(function(d) {
        return d.properties.bay_area;
      }))).attr('class', 'outline').attr('d', this.path).style('stroke', 'black').style('stroke-width', '2pt').style('stroke-dasharray', '3, 4').style('fill', 'none');
    };

    CountyMap.prototype.zoom = function(scale) {
      var _this = this;
      this.projection.scale(scale);
      this.path.projection(this.projection);
      this.counties.selectAll('path').transition().attr('d', this.path);
      this.hoverLayer.selectAll('path').transition().attr('d', this.path);
      this.hoverLayer.selectAll('text.name').attr('x', function(d) {
        return _this.path.centroid(d)[0];
      }).attr('y', function(d) {
        return _this.path.centroid(d)[1];
      });
      this.hoverLayer.selectAll('text.value').attr('x', function(d) {
        return _this.path.centroid(d)[0];
      }).attr('y', function(d) {
        return _this.path.centroid(d)[1] + 15;
      });
      this.outline.transition().attr('d', this.path);
      return this.bay_area.transition().attr('d', this.path);
    };

    CountyMap.prototype.appendCounties = function(counties) {
      this.counties = this.svg.selectAll('.county').data(topojson.feature(counties, counties.objects.california_counties).features).enter().append('g').attr('class', 'county');
      return this.counties.append('path').attr('class', 'fill').datum(function(d) {
        return d;
      }).attr('d', this.path).style('fill', 'white');
    };

    CountyMap.prototype.appendHoverLayer = function(counties) {
      var _this = this;
      this.hoverLayer = this.svg.selectAll('.county_hover').data(topojson.feature(counties, counties.objects.california_counties).features).enter().append('g').attr('class', 'tooltip county_hover').style('opacity', 0);
      this.hoverLayer.append('path').datum(function(d) {
        return d;
      }).attr('d', this.path).style('stroke', 'black').style('stroke-width', 2).style('fill', 'white').style('fill-opacity', 0);
      this.hoverLayer.append('text').text(function(d) {
        return d.properties.name;
      }).attr('x', function(d) {
        return _this.path.centroid(d)[0];
      }).attr('y', function(d) {
        return _this.path.centroid(d)[1];
      }).attr('text-anchor', 'middle').attr('class', 'name').style('font-weight', 'bold').style('font-size', '8pt').style('stroke', 'white').style('stroke-width', '2pt');
      this.hoverLayer.append('text').text(function(d) {
        return d.properties.name;
      }).attr('class', 'name').attr('x', function(d) {
        return _this.path.centroid(d)[0];
      }).attr('y', function(d) {
        return _this.path.centroid(d)[1];
      }).attr('text-anchor', 'middle').style('font-weight', 'bold').style('font-size', '8pt');
      this.hoverLayer.append('text').attr('class', 'value').attr('x', function(d) {
        return _this.path.centroid(d)[0];
      }).attr('y', function(d) {
        return _this.path.centroid(d)[1] + 15;
      }).attr('text-anchor', 'middle').style('font-size', '8pt').style('stroke', 'white').style('stroke-width', '2pt').style('font-weight', 'bold');
      this.hoverLayer.append('text').attr('class', 'value').attr('x', function(d) {
        return _this.path.centroid(d)[0];
      }).attr('y', function(d) {
        return _this.path.centroid(d)[1] + 15;
      }).attr('text-anchor', 'middle').style('font-size', '8pt').style('font-weight', 'bold');
      return this.hoverLayer.on('mouseover', function(d) {
        return d3.select(this).style('opacity', 1);
      }).on('mouseout', function() {
        return d3.select(this).style('opacity', 0);
      });
    };

    CountyMap.prototype.updateWindow = function() {
      var x, y;
      x = window.innerWidth;
      return y = window.innerHeight;
    };

    CountyMap.prototype.loadPopulationData = function(year, race, age) {
      var _this = this;
      age || (age = "all");
      return d3.json("/data.json?year=" + year + "&race=" + race + "&age_group=" + age + "&gender=all", function(data) {
        return d3.json("/data.json?year=" + year + "&race=all&age_group=all&gender=all", function(totals) {
          var colorWrapper, percentageOfTotal, pop, row, _i, _j, _len, _len1;
          pop = {};
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            row = data[_i];
            pop[row.county] = row;
          }
          for (_j = 0, _len1 = totals.length; _j < _len1; _j++) {
            row = totals[_j];
            pop[row.county].total = row.estimate;
          }
          colorWrapper = function(value) {
            return _this.colors(percentageOfTotal(value));
          };
          percentageOfTotal = function(d) {
            var p;
            p = pop[d.properties.name];
            return p.estimate / p.total;
          };
          _this.counties.selectAll('path.fill').transition().style('fill', function(d) {
            return _this.colors(percentageOfTotal(d));
          });
          return _this.hoverLayer.selectAll('text.value').text(function(d) {
            return "" + (d3.round(100 * percentageOfTotal(d), 1)) + "%";
          });
        });
      });
    };

    return CountyMap;

  })();

  d3.json("/meta.json", function(meta) {
    return window.map = new CountyMap(meta);
  });

}).call(this);
